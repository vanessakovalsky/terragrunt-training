name: Deploy to AWS with Terragrunt

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      action:
        description: 'Terragrunt action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: '1.6.0'
  TERRAGRUNT_VERSION: '0.53.0'
  AWS_DEFAULT_REGION: 'eu-west-1'

jobs:
  # Job de validation pour les PR
  validate:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: Validate Terragrunt Configuration
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Setup Terragrunt
      run: |
        curl -Lo terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
        chmod +x terragrunt
        sudo mv terragrunt /usr/local/bin/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Terragrunt Format Check
      run: |
        cd infrastructure
        terragrunt hclfmt --terragrunt-check

    - name: Terragrunt Validate
      run: |
        cd infrastructure
        terragrunt run-all validate

  # Job de planification
  plan:
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    runs-on: ubuntu-latest
    name: Plan Infrastructure Changes
    
    strategy:
      matrix:
        environment: ${{ github.event_name == 'workflow_dispatch' && fromJSON(format('["{0}"]', github.event.inputs.environment)) || fromJSON('["dev"]') }}
    
    environment: ${{ matrix.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Setup Terragrunt
      run: |
        curl -Lo terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
        chmod +x terragrunt
        sudo mv terragrunt /usr/local/bin/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        role-session-name: GitHubActions-${{ github.run_id }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Terragrunt Plan
      id: plan
      run: |
        cd infrastructure/environments/${{ matrix.environment }}
        terragrunt run-all plan --terragrunt-non-interactive -out=tfplan
      continue-on-error: true

    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### Terragrunt Plan üìñ \`${{ matrix.environment }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Plan Status Check
      if: steps.plan.outcome == 'failure'
      run: exit 1

  # Job de d√©ploiement
  deploy:
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    runs-on: ubuntu-latest
    name: Deploy Infrastructure
    needs: []
    
    strategy:
      matrix:
        environment: ${{ github.event_name == 'workflow_dispatch' && fromJSON(format('["{0}"]', github.event.inputs.environment)) || fromJSON('["dev"]') }}
    
    environment: 
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Setup Terragrunt
      run: |
        curl -Lo terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
        chmod +x terragrunt
        sudo mv terragrunt /usr/local/bin/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        role-session-name: GitHubActions-${{ github.run_id }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Terragrunt Apply
      id: deploy
      run: |
        cd infrastructure/environments/${{ matrix.environment }}
        terragrunt run-all apply --terragrunt-non-interactive -auto-approve
        
        # R√©cup√©ration des outputs (optionnel)
        echo "url=https://example.com" >> $GITHUB_OUTPUT

    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Deployment to ${{ matrix.environment }} completed successfully"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Deployment to ${{ matrix.environment }} failed"
        exit 1

  # Job de destruction (uniquement via workflow_dispatch)
  destroy:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    name: Destroy Infrastructure
    
    strategy:
      matrix:
        environment: ${{ fromJSON(format('["{0}"]', github.event.inputs.environment)) }}
    
    environment: 
      name: ${{ matrix.environment }}-destroy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Setup Terragrunt
      run: |
        curl -Lo terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
        chmod +x terragrunt
        sudo mv terragrunt /usr/local/bin/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        role-session-name: GitHubActions-Destroy-${{ github.run_id }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Terragrunt Destroy
      run: |
        cd infrastructure/environments/${{ matrix.environment }}
        terragrunt run-all destroy --terragrunt-non-interactive -auto-approve

    - name: Notify destruction completion
      run: |
        echo "üóëÔ∏è Infrastructure destroyed for ${{ matrix.environment }}"